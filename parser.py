import asyncio
from pyrogram import Client
from pyrogram.types import Message
from decouple import config
from collections import defaultdict
from database import save_user_data  # —Ç–≤–æ—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
from gpt import analyze_user_messages  # GPT-–≤—ã–∑–æ–≤ (—Å–º. –Ω–∏–∂–µ)

bot = Client(
    name=config('LOGIN'),
    api_id=config('API_ID'),
    api_hash=config('API_HASH'),
    phone_number=config('PHONE')
)

GROUPS = config("GROUPS", cast=lambda v: v.split(","), default=[])

async def group_parser():
    user_messages = defaultdict(list)

    for group in GROUPS:
        print(f"[PARSER] –ß–∏—Ç–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ {group}")
        async for msg in bot.get_chat_history(group, limit=500):  # –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç
            if not msg.from_user or not msg.text:
                continue
            user_id = msg.from_user.id
            user_messages[user_id].append(msg.text)

    print(f"[PARSER] –°–æ–±—Ä–∞–Ω–æ {len(user_messages)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ GPT
    for user_id, msgs in user_messages.items():
        combined_text = "\n".join(msgs)
        try:
            gpt_result = analyze_user_messages(combined_text)

            save_user_data(
                user_id=user_id,
                target=gpt_result["target"],
                info=gpt_result["info"],
                messages=combined_text
            )
            print(f"[OK] {user_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
        except Exception as e:
            print(f"[ERROR] {user_id}: {e}")


# üîπ GPT-–∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
def analyze_user_messages(messages: str) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ GPT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å:
    {
        "target": 0/1,
        "info": "...",
        "messages": "..."
    }
    """
    prompt = f"""
–¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –ø–µ—Ä–µ–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö —á–∞—Ç–æ–≤.
–°–æ–æ–±—â–µ–Ω–∏—è:
{messages}

1. target ‚Äî –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤ –Ω–∞—à–µ–π —Ç–µ–º–µ (0 –∏–ª–∏ 1).
2. info ‚Äî –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏, –æ —á—ë–º –ø–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
–û—Ç–≤–µ—Ç—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ: {{"target": int, "info": str}}
"""
    response = get_assistant_response_(prompt)  # —Ç–≤–æ–π GPT –≤—ã–∑–æ–≤
    return {
        "target": response["target"],
        "info": response["info"],
        "messages": messages
    }